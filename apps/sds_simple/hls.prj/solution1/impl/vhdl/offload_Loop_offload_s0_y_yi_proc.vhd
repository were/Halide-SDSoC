-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity offload_Loop_offload_s0_y_yi_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_p0_to_offload_s0_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_p0_to_offload_s0_stream_V_empty_n : IN STD_LOGIC;
    p_p0_to_offload_s0_stream_V_read : OUT STD_LOGIC;
    p_offload_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_offload_ce0 : OUT STD_LOGIC;
    p_offload_we0 : OUT STD_LOGIC;
    p_offload_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of offload_Loop_offload_s0_y_yi_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st5_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_22 : BOOLEAN;
    signal p_p0_to_offload_s0_stream_V_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_46 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond_reg_161 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_offload_s0_x_xi_reg_92 : STD_LOGIC_VECTOR (6 downto 0);
    signal next_mul_fu_103_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul_reg_147 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_66 : BOOLEAN;
    signal exitcond4_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_offload_s0_y_yi_1_fu_115_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_offload_s0_y_yi_1_reg_156 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_75 : BOOLEAN;
    signal p_offload_s0_x_xi_1_fu_131_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_273_fu_137_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_273_reg_170 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_offload_s0_y_yi_reg_69 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_3 : STD_LOGIC;
    signal ap_sig_99 : BOOLEAN;
    signal ap_sig_105 : BOOLEAN;
    signal phi_mul_reg_80 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_fu_143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_offload_s0_x_xi_cast8_fu_121_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond4_fu_109_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_75)) and not((ap_const_lv1_0 = exitcond_fu_125_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond4_fu_109_p2))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_75)) and (ap_const_lv1_0 = exitcond_fu_125_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond4_fu_109_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_75)) and not((ap_const_lv1_0 = exitcond_fu_125_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_offload_s0_x_xi_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_75)) and (ap_const_lv1_0 = exitcond_fu_125_p2))) then 
                p_offload_s0_x_xi_reg_92 <= p_offload_s0_x_xi_1_fu_131_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond4_fu_109_p2))) then 
                p_offload_s0_x_xi_reg_92 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    p_offload_s0_y_yi_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_105))) then 
                p_offload_s0_y_yi_reg_69 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3)) then 
                p_offload_s0_y_yi_reg_69 <= p_offload_s0_y_yi_1_reg_156;
            end if; 
        end if;
    end process;

    phi_mul_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_105))) then 
                phi_mul_reg_80 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3)) then 
                phi_mul_reg_80 <= next_mul_reg_147;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_75)))) then
                exitcond_reg_161 <= exitcond_fu_125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                next_mul_reg_147 <= next_mul_fu_103_p2;
                p_offload_s0_y_yi_1_reg_156 <= p_offload_s0_y_yi_1_fu_115_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_75)) and (ap_const_lv1_0 = exitcond_fu_125_p2))) then
                p_273_reg_170 <= p_273_fu_137_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it0, exitcond4_fu_109_p2, exitcond_fu_125_p2, ap_sig_75, ap_sig_105)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_105)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_109_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_75)) and not((ap_const_lv1_0 = exitcond_fu_125_p2))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_75)) and not((ap_const_lv1_0 = exitcond_fu_125_p2)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st5_fsm_3 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_109_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond4_fu_109_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_109_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond4_fu_109_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_105_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_105 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_sig_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_46_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_46 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_66_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_66 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_75_assign_proc : process(p_p0_to_offload_s0_stream_V_empty_n, exitcond_reg_161)
    begin
                ap_sig_75 <= ((exitcond_reg_161 = ap_const_lv1_0) and (p_p0_to_offload_s0_stream_V_empty_n = ap_const_logic_0));
    end process;


    ap_sig_99_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_99 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_46)
    begin
        if (ap_sig_46) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_22)
    begin
        if (ap_sig_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_66)
    begin
        if (ap_sig_66) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_3_assign_proc : process(ap_sig_99)
    begin
        if (ap_sig_99) then 
            ap_sig_cseq_ST_st5_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_fu_109_p2 <= "1" when (p_offload_s0_y_yi_reg_69 = ap_const_lv7_64) else "0";
    exitcond_fu_125_p2 <= "1" when (p_offload_s0_x_xi_reg_92 = ap_const_lv7_64) else "0";
    next_mul_fu_103_p2 <= std_logic_vector(unsigned(phi_mul_reg_80) + unsigned(ap_const_lv14_64));
    p_273_fu_137_p2 <= std_logic_vector(unsigned(phi_mul_reg_80) + unsigned(p_offload_s0_x_xi_cast8_fu_121_p1));
    p_offload_address0 <= tmp_6_fu_143_p1(14 - 1 downto 0);

    p_offload_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, ap_sig_75)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_75)))) then 
            p_offload_ce0 <= ap_const_logic_1;
        else 
            p_offload_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_offload_d0 <= p_p0_to_offload_s0_stream_V_dout;
    p_offload_s0_x_xi_1_fu_131_p2 <= std_logic_vector(unsigned(p_offload_s0_x_xi_reg_92) + unsigned(ap_const_lv7_1));
    p_offload_s0_x_xi_cast8_fu_121_p1 <= std_logic_vector(resize(unsigned(p_offload_s0_x_xi_reg_92),14));
    p_offload_s0_y_yi_1_fu_115_p2 <= std_logic_vector(unsigned(p_offload_s0_y_yi_reg_69) + unsigned(ap_const_lv7_1));

    p_offload_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, exitcond_reg_161, ap_sig_75)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_reg_161 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_75))))) then 
            p_offload_we0 <= ap_const_logic_1;
        else 
            p_offload_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_p0_to_offload_s0_stream_V_blk_n_assign_proc : process(p_p0_to_offload_s0_stream_V_empty_n, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, exitcond_reg_161)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_reg_161 = ap_const_lv1_0))) then 
            p_p0_to_offload_s0_stream_V_blk_n <= p_p0_to_offload_s0_stream_V_empty_n;
        else 
            p_p0_to_offload_s0_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_p0_to_offload_s0_stream_V_read_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, exitcond_reg_161, ap_sig_75)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_reg_161 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_75)))) then 
            p_p0_to_offload_s0_stream_V_read <= ap_const_logic_1;
        else 
            p_p0_to_offload_s0_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_6_fu_143_p1 <= std_logic_vector(resize(unsigned(p_273_reg_170),64));
end behav;
