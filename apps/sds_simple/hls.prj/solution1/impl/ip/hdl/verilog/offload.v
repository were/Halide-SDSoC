// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="offload,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.710000,HLS_SYN_LAT=10401,HLS_SYN_TPT=10402,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=150,HLS_SYN_LUT=181}" *)

module offload (
        p_p0_address0,
        p_p0_ce0,
        p_p0_d0,
        p_p0_q0,
        p_p0_we0,
        p_p0_address1,
        p_p0_ce1,
        p_p0_d1,
        p_p0_q1,
        p_p0_we1,
        p_offload_address0,
        p_offload_ce0,
        p_offload_d0,
        p_offload_q0,
        p_offload_we0,
        p_offload_address1,
        p_offload_ce1,
        p_offload_d1,
        p_offload_q1,
        p_offload_we1,
        ap_clk,
        ap_rst,
        ap_done,
        ap_start,
        ap_ready,
        ap_idle
);

parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv8_0 = 8'b00000000;

output  [13:0] p_p0_address0;
output   p_p0_ce0;
output  [7:0] p_p0_d0;
input  [7:0] p_p0_q0;
output   p_p0_we0;
output  [13:0] p_p0_address1;
output   p_p0_ce1;
output  [7:0] p_p0_d1;
input  [7:0] p_p0_q1;
output   p_p0_we1;
output  [13:0] p_offload_address0;
output   p_offload_ce0;
output  [7:0] p_offload_d0;
input  [7:0] p_offload_q0;
output   p_offload_we0;
output  [13:0] p_offload_address1;
output   p_offload_ce1;
output  [7:0] p_offload_d1;
input  [7:0] p_offload_q1;
output   p_offload_we1;
input   ap_clk;
input   ap_rst;
output   ap_done;
input   ap_start;
output   ap_ready;
output   ap_idle;

reg ap_idle;

wire    offload_Loop_distributor_p0_1_proc_U0_ap_start;
wire    offload_Loop_distributor_p0_1_proc_U0_ap_done;
wire    offload_Loop_distributor_p0_1_proc_U0_ap_continue;
wire    offload_Loop_distributor_p0_1_proc_U0_ap_idle;
wire    offload_Loop_distributor_p0_1_proc_U0_ap_ready;
wire   [13:0] offload_Loop_distributor_p0_1_proc_U0_p_p0_address0;
wire    offload_Loop_distributor_p0_1_proc_U0_p_p0_ce0;
wire   [7:0] offload_Loop_distributor_p0_1_proc_U0_p_p0_to_offload_s0_stream_V_din;
wire    offload_Loop_distributor_p0_1_proc_U0_p_p0_to_offload_s0_stream_V_write;
reg    offload_Loop_offload_s0_y_yi_proc_U0_ap_start;
wire    offload_Loop_offload_s0_y_yi_proc_U0_ap_done;
wire    offload_Loop_offload_s0_y_yi_proc_U0_ap_continue;
wire    offload_Loop_offload_s0_y_yi_proc_U0_ap_idle;
wire    offload_Loop_offload_s0_y_yi_proc_U0_ap_ready;
wire    offload_Loop_offload_s0_y_yi_proc_U0_p_p0_to_offload_s0_stream_V_read;
wire   [13:0] offload_Loop_offload_s0_y_yi_proc_U0_p_offload_address0;
wire    offload_Loop_offload_s0_y_yi_proc_U0_p_offload_ce0;
wire    offload_Loop_offload_s0_y_yi_proc_U0_p_offload_we0;
wire   [7:0] offload_Loop_offload_s0_y_yi_proc_U0_p_offload_d0;
wire    ap_sig_hs_continue;
wire    p_p0_to_offload_s0_stream_V_full_n;
wire   [7:0] p_p0_to_offload_s0_stream_V_dout;
wire    p_p0_to_offload_s0_stream_V_empty_n;
reg    ap_sig_hs_done;
wire    ap_sig_hs_ready;

// power-on initialization
initial begin
#0 offload_Loop_offload_s0_y_yi_proc_U0_ap_start = 1'b0;
end

offload_Loop_distributor_p0_1_proc offload_Loop_distributor_p0_1_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(offload_Loop_distributor_p0_1_proc_U0_ap_start),
    .ap_done(offload_Loop_distributor_p0_1_proc_U0_ap_done),
    .ap_continue(offload_Loop_distributor_p0_1_proc_U0_ap_continue),
    .ap_idle(offload_Loop_distributor_p0_1_proc_U0_ap_idle),
    .ap_ready(offload_Loop_distributor_p0_1_proc_U0_ap_ready),
    .p_p0_address0(offload_Loop_distributor_p0_1_proc_U0_p_p0_address0),
    .p_p0_ce0(offload_Loop_distributor_p0_1_proc_U0_p_p0_ce0),
    .p_p0_q0(p_p0_q0),
    .p_p0_to_offload_s0_stream_V_din(offload_Loop_distributor_p0_1_proc_U0_p_p0_to_offload_s0_stream_V_din),
    .p_p0_to_offload_s0_stream_V_full_n(p_p0_to_offload_s0_stream_V_full_n),
    .p_p0_to_offload_s0_stream_V_write(offload_Loop_distributor_p0_1_proc_U0_p_p0_to_offload_s0_stream_V_write)
);

offload_Loop_offload_s0_y_yi_proc offload_Loop_offload_s0_y_yi_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(offload_Loop_offload_s0_y_yi_proc_U0_ap_start),
    .ap_done(offload_Loop_offload_s0_y_yi_proc_U0_ap_done),
    .ap_continue(offload_Loop_offload_s0_y_yi_proc_U0_ap_continue),
    .ap_idle(offload_Loop_offload_s0_y_yi_proc_U0_ap_idle),
    .ap_ready(offload_Loop_offload_s0_y_yi_proc_U0_ap_ready),
    .p_p0_to_offload_s0_stream_V_dout(p_p0_to_offload_s0_stream_V_dout),
    .p_p0_to_offload_s0_stream_V_empty_n(p_p0_to_offload_s0_stream_V_empty_n),
    .p_p0_to_offload_s0_stream_V_read(offload_Loop_offload_s0_y_yi_proc_U0_p_p0_to_offload_s0_stream_V_read),
    .p_offload_address0(offload_Loop_offload_s0_y_yi_proc_U0_p_offload_address0),
    .p_offload_ce0(offload_Loop_offload_s0_y_yi_proc_U0_p_offload_ce0),
    .p_offload_we0(offload_Loop_offload_s0_y_yi_proc_U0_p_offload_we0),
    .p_offload_d0(offload_Loop_offload_s0_y_yi_proc_U0_p_offload_d0)
);

FIFO_offload_p_p0_to_offload_s0_stream_V p_p0_to_offload_s0_stream_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(offload_Loop_distributor_p0_1_proc_U0_p_p0_to_offload_s0_stream_V_din),
    .if_full_n(p_p0_to_offload_s0_stream_V_full_n),
    .if_write(offload_Loop_distributor_p0_1_proc_U0_p_p0_to_offload_s0_stream_V_write),
    .if_dout(p_p0_to_offload_s0_stream_V_dout),
    .if_empty_n(p_p0_to_offload_s0_stream_V_empty_n),
    .if_read(offload_Loop_offload_s0_y_yi_proc_U0_p_p0_to_offload_s0_stream_V_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        offload_Loop_offload_s0_y_yi_proc_U0_ap_start <= 1'b0;
    end else begin
        offload_Loop_offload_s0_y_yi_proc_U0_ap_start <= 1'b1;
    end
end

always @ (*) begin
    if (((offload_Loop_distributor_p0_1_proc_U0_ap_idle == 1'b1) & (1'b1 == offload_Loop_offload_s0_y_yi_proc_U0_ap_idle))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == offload_Loop_offload_s0_y_yi_proc_U0_ap_done)) begin
        ap_sig_hs_done = 1'b1;
    end else begin
        ap_sig_hs_done = 1'b0;
    end
end

assign ap_done = ap_sig_hs_done;

assign ap_ready = offload_Loop_distributor_p0_1_proc_U0_ap_ready;

assign ap_sig_hs_continue = 1'b1;

assign ap_sig_hs_ready = offload_Loop_distributor_p0_1_proc_U0_ap_ready;

assign offload_Loop_distributor_p0_1_proc_U0_ap_continue = 1'b1;

assign offload_Loop_distributor_p0_1_proc_U0_ap_start = ap_start;

assign offload_Loop_offload_s0_y_yi_proc_U0_ap_continue = 1'b1;

assign p_offload_address0 = offload_Loop_offload_s0_y_yi_proc_U0_p_offload_address0;

assign p_offload_address1 = ap_const_lv14_0;

assign p_offload_ce0 = offload_Loop_offload_s0_y_yi_proc_U0_p_offload_ce0;

assign p_offload_ce1 = 1'b0;

assign p_offload_d0 = offload_Loop_offload_s0_y_yi_proc_U0_p_offload_d0;

assign p_offload_d1 = ap_const_lv8_0;

assign p_offload_we0 = offload_Loop_offload_s0_y_yi_proc_U0_p_offload_we0;

assign p_offload_we1 = 1'b0;

assign p_p0_address0 = offload_Loop_distributor_p0_1_proc_U0_p_p0_address0;

assign p_p0_address1 = ap_const_lv14_0;

assign p_p0_ce0 = offload_Loop_distributor_p0_1_proc_U0_p_p0_ce0;

assign p_p0_ce1 = 1'b0;

assign p_p0_d0 = ap_const_lv8_0;

assign p_p0_d1 = ap_const_lv8_0;

assign p_p0_we0 = 1'b0;

assign p_p0_we1 = 1'b0;

endmodule //offload
