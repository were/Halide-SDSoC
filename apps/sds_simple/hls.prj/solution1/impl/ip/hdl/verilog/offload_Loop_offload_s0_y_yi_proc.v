// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module offload_Loop_offload_s0_y_yi_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_p0_to_offload_s0_stream_V_dout,
        p_p0_to_offload_s0_stream_V_empty_n,
        p_p0_to_offload_s0_stream_V_read,
        p_offload_address0,
        p_offload_ce0,
        p_offload_we0,
        p_offload_d0
);

parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_pp0_stg0_fsm_2 = 4'b100;
parameter    ap_ST_st5_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv14_64 = 14'b1100100;
parameter    ap_const_lv7_64 = 7'b1100100;
parameter    ap_const_lv7_1 = 7'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] p_p0_to_offload_s0_stream_V_dout;
input   p_p0_to_offload_s0_stream_V_empty_n;
output   p_p0_to_offload_s0_stream_V_read;
output  [13:0] p_offload_address0;
output   p_offload_ce0;
output   p_offload_we0;
output  [7:0] p_offload_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_p0_to_offload_s0_stream_V_read;
reg p_offload_ce0;
reg p_offload_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_22;
reg    p_p0_to_offload_s0_stream_V_blk_n;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_2;
reg    ap_sig_46;
reg    ap_reg_ppiten_pp0_it1;
reg    ap_reg_ppiten_pp0_it0;
reg   [0:0] exitcond_reg_161;
reg   [6:0] p_offload_s0_x_xi_reg_92;
wire   [13:0] next_mul_fu_103_p2;
reg   [13:0] next_mul_reg_147;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_66;
wire   [0:0] exitcond4_fu_109_p2;
wire   [6:0] p_offload_s0_y_yi_1_fu_115_p2;
reg   [6:0] p_offload_s0_y_yi_1_reg_156;
wire   [0:0] exitcond_fu_125_p2;
reg    ap_sig_75;
wire   [6:0] p_offload_s0_x_xi_1_fu_131_p2;
wire   [13:0] p_273_fu_137_p2;
reg   [13:0] p_273_reg_170;
reg   [6:0] p_offload_s0_y_yi_reg_69;
reg    ap_sig_cseq_ST_st5_fsm_3;
reg    ap_sig_99;
reg    ap_sig_105;
reg   [13:0] phi_mul_reg_80;
wire   [63:0] tmp_6_fu_143_p1;
wire   [13:0] p_offload_s0_x_xi_cast8_fu_121_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'b1;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
#0 ap_reg_ppiten_pp0_it0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond4_fu_109_p2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_75) & ~(1'b0 == exitcond_fu_125_p2))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond4_fu_109_p2))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_75) & (1'b0 == exitcond_fu_125_p2))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b1;
        end else if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond4_fu_109_p2)) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_75) & ~(1'b0 == exitcond_fu_125_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_75) & (1'b0 == exitcond_fu_125_p2))) begin
        p_offload_s0_x_xi_reg_92 <= p_offload_s0_x_xi_1_fu_131_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond4_fu_109_p2))) begin
        p_offload_s0_x_xi_reg_92 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_105)) begin
        p_offload_s0_y_yi_reg_69 <= ap_const_lv7_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_3)) begin
        p_offload_s0_y_yi_reg_69 <= p_offload_s0_y_yi_1_reg_156;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_105)) begin
        phi_mul_reg_80 <= ap_const_lv14_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_3)) begin
        phi_mul_reg_80 <= next_mul_reg_147;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_75))) begin
        exitcond_reg_161 <= exitcond_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        next_mul_reg_147 <= next_mul_fu_103_p2;
        p_offload_s0_y_yi_1_reg_156 <= p_offload_s0_y_yi_1_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_75) & (1'b0 == exitcond_fu_125_p2))) begin
        p_273_reg_170 <= p_273_fu_137_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond4_fu_109_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond4_fu_109_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_46) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_66) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_99) begin
        ap_sig_cseq_ST_st5_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_75))) begin
        p_offload_ce0 = 1'b1;
    end else begin
        p_offload_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_reg_161 == 1'b0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_75))) begin
        p_offload_we0 = 1'b1;
    end else begin
        p_offload_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_reg_161 == 1'b0))) begin
        p_p0_to_offload_s0_stream_V_blk_n = p_p0_to_offload_s0_stream_V_empty_n;
    end else begin
        p_p0_to_offload_s0_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_reg_161 == 1'b0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_75))) begin
        p_p0_to_offload_s0_stream_V_read = 1'b1;
    end else begin
        p_p0_to_offload_s0_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_105) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond4_fu_109_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        end
        ap_ST_pp0_stg0_fsm_2 : begin
            if (~((1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_75) & ~(1'b0 == exitcond_fu_125_p2))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else if (((1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_75) & ~(1'b0 == exitcond_fu_125_p2))) begin
                ap_NS_fsm = ap_ST_st5_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        end
        ap_ST_st5_fsm_3 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_105 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_sig_22 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_46 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_66 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_75 = ((exitcond_reg_161 == 1'b0) & (p_p0_to_offload_s0_stream_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_sig_99 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign exitcond4_fu_109_p2 = ((p_offload_s0_y_yi_reg_69 == ap_const_lv7_64) ? 1'b1 : 1'b0);

assign exitcond_fu_125_p2 = ((p_offload_s0_x_xi_reg_92 == ap_const_lv7_64) ? 1'b1 : 1'b0);

assign next_mul_fu_103_p2 = (phi_mul_reg_80 + ap_const_lv14_64);

assign p_273_fu_137_p2 = (phi_mul_reg_80 + p_offload_s0_x_xi_cast8_fu_121_p1);

assign p_offload_address0 = tmp_6_fu_143_p1;

assign p_offload_d0 = p_p0_to_offload_s0_stream_V_dout;

assign p_offload_s0_x_xi_1_fu_131_p2 = (p_offload_s0_x_xi_reg_92 + ap_const_lv7_1);

assign p_offload_s0_x_xi_cast8_fu_121_p1 = p_offload_s0_x_xi_reg_92;

assign p_offload_s0_y_yi_1_fu_115_p2 = (p_offload_s0_y_yi_reg_69 + ap_const_lv7_1);

assign tmp_6_fu_143_p1 = p_273_reg_170;

endmodule //offload_Loop_offload_s0_y_yi_proc
