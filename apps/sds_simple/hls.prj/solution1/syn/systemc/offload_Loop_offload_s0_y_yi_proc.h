// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _offload_Loop_offload_s0_y_yi_proc_HH_
#define _offload_Loop_offload_s0_y_yi_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct offload_Loop_offload_s0_y_yi_proc : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > p_p0_to_offload_s0_stream_V_dout;
    sc_in< sc_logic > p_p0_to_offload_s0_stream_V_empty_n;
    sc_out< sc_logic > p_p0_to_offload_s0_stream_V_read;
    sc_out< sc_lv<14> > p_offload_address0;
    sc_out< sc_logic > p_offload_ce0;
    sc_out< sc_logic > p_offload_we0;
    sc_out< sc_lv<8> > p_offload_d0;


    // Module declarations
    offload_Loop_offload_s0_y_yi_proc(sc_module_name name);
    SC_HAS_PROCESS(offload_Loop_offload_s0_y_yi_proc);

    ~offload_Loop_offload_s0_y_yi_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_22;
    sc_signal< sc_logic > p_p0_to_offload_s0_stream_V_blk_n;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_2;
    sc_signal< bool > ap_sig_46;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_lv<1> > exitcond_reg_161;
    sc_signal< sc_lv<7> > p_offload_s0_x_xi_reg_92;
    sc_signal< sc_lv<14> > next_mul_fu_103_p2;
    sc_signal< sc_lv<14> > next_mul_reg_147;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_66;
    sc_signal< sc_lv<1> > exitcond4_fu_109_p2;
    sc_signal< sc_lv<7> > p_offload_s0_y_yi_1_fu_115_p2;
    sc_signal< sc_lv<7> > p_offload_s0_y_yi_1_reg_156;
    sc_signal< sc_lv<1> > exitcond_fu_125_p2;
    sc_signal< bool > ap_sig_75;
    sc_signal< sc_lv<7> > p_offload_s0_x_xi_1_fu_131_p2;
    sc_signal< sc_lv<14> > p_273_fu_137_p2;
    sc_signal< sc_lv<14> > p_273_reg_170;
    sc_signal< sc_lv<7> > p_offload_s0_y_yi_reg_69;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_3;
    sc_signal< bool > ap_sig_99;
    sc_signal< bool > ap_sig_105;
    sc_signal< sc_lv<14> > phi_mul_reg_80;
    sc_signal< sc_lv<64> > tmp_6_fu_143_p1;
    sc_signal< sc_lv<14> > p_offload_s0_x_xi_cast8_fu_121_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_st1_fsm_0;
    static const sc_lv<4> ap_ST_st2_fsm_1;
    static const sc_lv<4> ap_ST_pp0_stg0_fsm_2;
    static const sc_lv<4> ap_ST_st5_fsm_3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<14> ap_const_lv14_64;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_105();
    void thread_ap_sig_22();
    void thread_ap_sig_46();
    void thread_ap_sig_66();
    void thread_ap_sig_75();
    void thread_ap_sig_99();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_2();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st5_fsm_3();
    void thread_exitcond4_fu_109_p2();
    void thread_exitcond_fu_125_p2();
    void thread_next_mul_fu_103_p2();
    void thread_p_273_fu_137_p2();
    void thread_p_offload_address0();
    void thread_p_offload_ce0();
    void thread_p_offload_d0();
    void thread_p_offload_s0_x_xi_1_fu_131_p2();
    void thread_p_offload_s0_x_xi_cast8_fu_121_p1();
    void thread_p_offload_s0_y_yi_1_fu_115_p2();
    void thread_p_offload_we0();
    void thread_p_p0_to_offload_s0_stream_V_blk_n();
    void thread_p_p0_to_offload_s0_stream_V_read();
    void thread_tmp_6_fu_143_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
