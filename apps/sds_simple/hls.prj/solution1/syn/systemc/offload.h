// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _offload_HH_
#define _offload_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "offload_Loop_distributor_p0_1_proc.h"
#include "offload_Loop_offload_s0_y_yi_proc.h"
#include "FIFO_offload_p_p0_to_offload_s0_stream_V.h"

namespace ap_rtl {

struct offload : public sc_module {
    // Port declarations 26
    sc_out< sc_lv<14> > p_p0_address0;
    sc_out< sc_logic > p_p0_ce0;
    sc_out< sc_lv<8> > p_p0_d0;
    sc_in< sc_lv<8> > p_p0_q0;
    sc_out< sc_logic > p_p0_we0;
    sc_out< sc_lv<14> > p_p0_address1;
    sc_out< sc_logic > p_p0_ce1;
    sc_out< sc_lv<8> > p_p0_d1;
    sc_in< sc_lv<8> > p_p0_q1;
    sc_out< sc_logic > p_p0_we1;
    sc_out< sc_lv<14> > p_offload_address0;
    sc_out< sc_logic > p_offload_ce0;
    sc_out< sc_lv<8> > p_offload_d0;
    sc_in< sc_lv<8> > p_offload_q0;
    sc_out< sc_logic > p_offload_we0;
    sc_out< sc_lv<14> > p_offload_address1;
    sc_out< sc_logic > p_offload_ce1;
    sc_out< sc_lv<8> > p_offload_d1;
    sc_in< sc_lv<8> > p_offload_q1;
    sc_out< sc_logic > p_offload_we1;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    offload(sc_module_name name);
    SC_HAS_PROCESS(offload);

    ~offload();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    offload_Loop_distributor_p0_1_proc* offload_Loop_distributor_p0_1_proc_U0;
    offload_Loop_offload_s0_y_yi_proc* offload_Loop_offload_s0_y_yi_proc_U0;
    FIFO_offload_p_p0_to_offload_s0_stream_V* p_p0_to_offload_s0_stream_V_U;
    sc_signal< sc_logic > offload_Loop_distributor_p0_1_proc_U0_ap_start;
    sc_signal< sc_logic > offload_Loop_distributor_p0_1_proc_U0_ap_done;
    sc_signal< sc_logic > offload_Loop_distributor_p0_1_proc_U0_ap_continue;
    sc_signal< sc_logic > offload_Loop_distributor_p0_1_proc_U0_ap_idle;
    sc_signal< sc_logic > offload_Loop_distributor_p0_1_proc_U0_ap_ready;
    sc_signal< sc_lv<14> > offload_Loop_distributor_p0_1_proc_U0_p_p0_address0;
    sc_signal< sc_logic > offload_Loop_distributor_p0_1_proc_U0_p_p0_ce0;
    sc_signal< sc_lv<8> > offload_Loop_distributor_p0_1_proc_U0_p_p0_to_offload_s0_stream_V_din;
    sc_signal< sc_logic > offload_Loop_distributor_p0_1_proc_U0_p_p0_to_offload_s0_stream_V_write;
    sc_signal< sc_logic > offload_Loop_offload_s0_y_yi_proc_U0_ap_start;
    sc_signal< sc_logic > offload_Loop_offload_s0_y_yi_proc_U0_ap_done;
    sc_signal< sc_logic > offload_Loop_offload_s0_y_yi_proc_U0_ap_continue;
    sc_signal< sc_logic > offload_Loop_offload_s0_y_yi_proc_U0_ap_idle;
    sc_signal< sc_logic > offload_Loop_offload_s0_y_yi_proc_U0_ap_ready;
    sc_signal< sc_logic > offload_Loop_offload_s0_y_yi_proc_U0_p_p0_to_offload_s0_stream_V_read;
    sc_signal< sc_lv<14> > offload_Loop_offload_s0_y_yi_proc_U0_p_offload_address0;
    sc_signal< sc_logic > offload_Loop_offload_s0_y_yi_proc_U0_p_offload_ce0;
    sc_signal< sc_logic > offload_Loop_offload_s0_y_yi_proc_U0_p_offload_we0;
    sc_signal< sc_lv<8> > offload_Loop_offload_s0_y_yi_proc_U0_p_offload_d0;
    sc_signal< sc_logic > ap_sig_hs_continue;
    sc_signal< sc_logic > p_p0_to_offload_s0_stream_V_full_n;
    sc_signal< sc_lv<8> > p_p0_to_offload_s0_stream_V_dout;
    sc_signal< sc_logic > p_p0_to_offload_s0_stream_V_empty_n;
    sc_signal< sc_logic > ap_sig_hs_done;
    sc_signal< sc_logic > ap_sig_hs_ready;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_logic ap_const_logic_1;
    static const bool ap_true;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_hs_continue();
    void thread_ap_sig_hs_done();
    void thread_ap_sig_hs_ready();
    void thread_offload_Loop_distributor_p0_1_proc_U0_ap_continue();
    void thread_offload_Loop_distributor_p0_1_proc_U0_ap_start();
    void thread_offload_Loop_offload_s0_y_yi_proc_U0_ap_continue();
    void thread_p_offload_address0();
    void thread_p_offload_address1();
    void thread_p_offload_ce0();
    void thread_p_offload_ce1();
    void thread_p_offload_d0();
    void thread_p_offload_d1();
    void thread_p_offload_we0();
    void thread_p_offload_we1();
    void thread_p_p0_address0();
    void thread_p_p0_address1();
    void thread_p_p0_ce0();
    void thread_p_p0_ce1();
    void thread_p_p0_d0();
    void thread_p_p0_d1();
    void thread_p_p0_we0();
    void thread_p_p0_we1();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
