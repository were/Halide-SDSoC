-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity offload is
port (
    p_p0_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_p0_ce0 : OUT STD_LOGIC;
    p_p0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_p0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_p0_we0 : OUT STD_LOGIC;
    p_p0_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_p0_ce1 : OUT STD_LOGIC;
    p_p0_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_p0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_p0_we1 : OUT STD_LOGIC;
    p_offload_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_offload_ce0 : OUT STD_LOGIC;
    p_offload_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_offload_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_offload_we0 : OUT STD_LOGIC;
    p_offload_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_offload_ce1 : OUT STD_LOGIC;
    p_offload_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_offload_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_offload_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of offload is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "offload,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.710000,HLS_SYN_LAT=10401,HLS_SYN_TPT=10402,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=150,HLS_SYN_LUT=181}";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;

    signal offload_Loop_distributor_p0_1_proc_U0_ap_start : STD_LOGIC;
    signal offload_Loop_distributor_p0_1_proc_U0_ap_done : STD_LOGIC;
    signal offload_Loop_distributor_p0_1_proc_U0_ap_continue : STD_LOGIC;
    signal offload_Loop_distributor_p0_1_proc_U0_ap_idle : STD_LOGIC;
    signal offload_Loop_distributor_p0_1_proc_U0_ap_ready : STD_LOGIC;
    signal offload_Loop_distributor_p0_1_proc_U0_p_p0_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal offload_Loop_distributor_p0_1_proc_U0_p_p0_ce0 : STD_LOGIC;
    signal offload_Loop_distributor_p0_1_proc_U0_p_p0_to_offload_s0_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal offload_Loop_distributor_p0_1_proc_U0_p_p0_to_offload_s0_stream_V_write : STD_LOGIC;
    signal offload_Loop_offload_s0_y_yi_proc_U0_ap_start : STD_LOGIC := '0';
    signal offload_Loop_offload_s0_y_yi_proc_U0_ap_done : STD_LOGIC;
    signal offload_Loop_offload_s0_y_yi_proc_U0_ap_continue : STD_LOGIC;
    signal offload_Loop_offload_s0_y_yi_proc_U0_ap_idle : STD_LOGIC;
    signal offload_Loop_offload_s0_y_yi_proc_U0_ap_ready : STD_LOGIC;
    signal offload_Loop_offload_s0_y_yi_proc_U0_p_p0_to_offload_s0_stream_V_read : STD_LOGIC;
    signal offload_Loop_offload_s0_y_yi_proc_U0_p_offload_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal offload_Loop_offload_s0_y_yi_proc_U0_p_offload_ce0 : STD_LOGIC;
    signal offload_Loop_offload_s0_y_yi_proc_U0_p_offload_we0 : STD_LOGIC;
    signal offload_Loop_offload_s0_y_yi_proc_U0_p_offload_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal p_p0_to_offload_s0_stream_V_full_n : STD_LOGIC;
    signal p_p0_to_offload_s0_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_p0_to_offload_s0_stream_V_empty_n : STD_LOGIC;
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_sig_hs_ready : STD_LOGIC;

    component offload_Loop_distributor_p0_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_p0_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_p0_ce0 : OUT STD_LOGIC;
        p_p0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_p0_to_offload_s0_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_p0_to_offload_s0_stream_V_full_n : IN STD_LOGIC;
        p_p0_to_offload_s0_stream_V_write : OUT STD_LOGIC );
    end component;


    component offload_Loop_offload_s0_y_yi_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_p0_to_offload_s0_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_p0_to_offload_s0_stream_V_empty_n : IN STD_LOGIC;
        p_p0_to_offload_s0_stream_V_read : OUT STD_LOGIC;
        p_offload_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_offload_ce0 : OUT STD_LOGIC;
        p_offload_we0 : OUT STD_LOGIC;
        p_offload_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component FIFO_offload_p_p0_to_offload_s0_stream_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    offload_Loop_distributor_p0_1_proc_U0 : component offload_Loop_distributor_p0_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => offload_Loop_distributor_p0_1_proc_U0_ap_start,
        ap_done => offload_Loop_distributor_p0_1_proc_U0_ap_done,
        ap_continue => offload_Loop_distributor_p0_1_proc_U0_ap_continue,
        ap_idle => offload_Loop_distributor_p0_1_proc_U0_ap_idle,
        ap_ready => offload_Loop_distributor_p0_1_proc_U0_ap_ready,
        p_p0_address0 => offload_Loop_distributor_p0_1_proc_U0_p_p0_address0,
        p_p0_ce0 => offload_Loop_distributor_p0_1_proc_U0_p_p0_ce0,
        p_p0_q0 => p_p0_q0,
        p_p0_to_offload_s0_stream_V_din => offload_Loop_distributor_p0_1_proc_U0_p_p0_to_offload_s0_stream_V_din,
        p_p0_to_offload_s0_stream_V_full_n => p_p0_to_offload_s0_stream_V_full_n,
        p_p0_to_offload_s0_stream_V_write => offload_Loop_distributor_p0_1_proc_U0_p_p0_to_offload_s0_stream_V_write);

    offload_Loop_offload_s0_y_yi_proc_U0 : component offload_Loop_offload_s0_y_yi_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => offload_Loop_offload_s0_y_yi_proc_U0_ap_start,
        ap_done => offload_Loop_offload_s0_y_yi_proc_U0_ap_done,
        ap_continue => offload_Loop_offload_s0_y_yi_proc_U0_ap_continue,
        ap_idle => offload_Loop_offload_s0_y_yi_proc_U0_ap_idle,
        ap_ready => offload_Loop_offload_s0_y_yi_proc_U0_ap_ready,
        p_p0_to_offload_s0_stream_V_dout => p_p0_to_offload_s0_stream_V_dout,
        p_p0_to_offload_s0_stream_V_empty_n => p_p0_to_offload_s0_stream_V_empty_n,
        p_p0_to_offload_s0_stream_V_read => offload_Loop_offload_s0_y_yi_proc_U0_p_p0_to_offload_s0_stream_V_read,
        p_offload_address0 => offload_Loop_offload_s0_y_yi_proc_U0_p_offload_address0,
        p_offload_ce0 => offload_Loop_offload_s0_y_yi_proc_U0_p_offload_ce0,
        p_offload_we0 => offload_Loop_offload_s0_y_yi_proc_U0_p_offload_we0,
        p_offload_d0 => offload_Loop_offload_s0_y_yi_proc_U0_p_offload_d0);

    p_p0_to_offload_s0_stream_V_U : component FIFO_offload_p_p0_to_offload_s0_stream_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => offload_Loop_distributor_p0_1_proc_U0_p_p0_to_offload_s0_stream_V_din,
        if_full_n => p_p0_to_offload_s0_stream_V_full_n,
        if_write => offload_Loop_distributor_p0_1_proc_U0_p_p0_to_offload_s0_stream_V_write,
        if_dout => p_p0_to_offload_s0_stream_V_dout,
        if_empty_n => p_p0_to_offload_s0_stream_V_empty_n,
        if_read => offload_Loop_offload_s0_y_yi_proc_U0_p_p0_to_offload_s0_stream_V_read);





    offload_Loop_offload_s0_y_yi_proc_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                offload_Loop_offload_s0_y_yi_proc_U0_ap_start <= ap_const_logic_0;
            else
                offload_Loop_offload_s0_y_yi_proc_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;

    ap_done <= ap_sig_hs_done;

    ap_idle_assign_proc : process(offload_Loop_distributor_p0_1_proc_U0_ap_idle, offload_Loop_offload_s0_y_yi_proc_U0_ap_idle)
    begin
        if (((offload_Loop_distributor_p0_1_proc_U0_ap_idle = ap_const_logic_1) and (ap_const_logic_1 = offload_Loop_offload_s0_y_yi_proc_U0_ap_idle))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= offload_Loop_distributor_p0_1_proc_U0_ap_ready;
    ap_sig_hs_continue <= ap_const_logic_1;

    ap_sig_hs_done_assign_proc : process(offload_Loop_offload_s0_y_yi_proc_U0_ap_done)
    begin
        if ((ap_const_logic_1 = offload_Loop_offload_s0_y_yi_proc_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_hs_ready <= offload_Loop_distributor_p0_1_proc_U0_ap_ready;
    offload_Loop_distributor_p0_1_proc_U0_ap_continue <= ap_const_logic_1;
    offload_Loop_distributor_p0_1_proc_U0_ap_start <= ap_start;
    offload_Loop_offload_s0_y_yi_proc_U0_ap_continue <= ap_const_logic_1;
    p_offload_address0 <= offload_Loop_offload_s0_y_yi_proc_U0_p_offload_address0;
    p_offload_address1 <= ap_const_lv14_0;
    p_offload_ce0 <= offload_Loop_offload_s0_y_yi_proc_U0_p_offload_ce0;
    p_offload_ce1 <= ap_const_logic_0;
    p_offload_d0 <= offload_Loop_offload_s0_y_yi_proc_U0_p_offload_d0;
    p_offload_d1 <= ap_const_lv8_0;
    p_offload_we0 <= offload_Loop_offload_s0_y_yi_proc_U0_p_offload_we0;
    p_offload_we1 <= ap_const_logic_0;
    p_p0_address0 <= offload_Loop_distributor_p0_1_proc_U0_p_p0_address0;
    p_p0_address1 <= ap_const_lv14_0;
    p_p0_ce0 <= offload_Loop_distributor_p0_1_proc_U0_p_p0_ce0;
    p_p0_ce1 <= ap_const_logic_0;
    p_p0_d0 <= ap_const_lv8_0;
    p_p0_d1 <= ap_const_lv8_0;
    p_p0_we0 <= ap_const_logic_0;
    p_p0_we1 <= ap_const_logic_0;
end behav;
